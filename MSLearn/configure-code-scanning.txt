コード スキャンを構成する
完了
100 XP
4 分
GitHub でどのようにプロジェクト内のコードの脆弱性とエラーをスキャンするかを構成できます。 独自の構成を選択するときは、時間を節約し、プロジェクトに合った最適なコード スキャン頻度を決定します。 このユニットでは、コード スキャン構成の基本事項について説明します。 また、リポジトリと開発のニーズに合わせてスキャン頻度の構成とスケジュール設定を行う方法についても説明します。

これまでのユニットで説明したように、コード スキャンは GitHub で GitHub Actions を使用して、または継続的インテグレーション (CI) システムから実行できます。 GitHub で [詳細設定 ] オプションを選択すると、カスタマイズ可能なワークフロー ファイルが生成され、リポジトリに直接コミットできます。 通常は、このワークフローを編集する必要はありません。 ただし、必要であれば一部の設定をカスタマイズできます。

たとえば、GitHub の CodeQL 分析ワークフローを編集して、スキャンの頻度、スキャンする言語またはディレクトリ、CodeQL コード スキャンによってコード内で見つける対象を指定できます。 また、特定のコマンド セットを使用してコードをコンパイルする場合も、CodeQL 分析ワークフローの編集が必要になることがあります。 CodeQL 分析は、GitHub で実行できるコード スキャンの種類の 1 つです。 GitHub Marketplace には、他にもいくつかのコード スキャン ワークフローが含まれています。

既定から高度なコード スキャン設定への切り替え
既定の設定方法を使用して、コード スキャンを使用するようにリポジトリを既に設定している場合は、設定で [詳細] 設定を使用するように切り替えることができます。 > の下にある [コード スキャン] セクションに移動し、3 つのドット オーバーフロー アイコン (...) を選択します。ドロップダウンで、[詳細設定に切り替える] を選択します。 次に、プロンプトに従って CodeQL を無効にし、詳細設定の生成されたワークフロー ファイルで再度有効にします。

コードスキャン ワークフローを編集する
GitHub は、リポジトリの .github/workflows ディレクトリにワークフロー ファイルを保存します。 追加したワークフローは、そのファイル名を検索して見つけることができます。 たとえば、既定では、CodeQL コード スキャンのワークフロー ファイルは codeql-analysis.yml と呼ばれます。

ワークフロー ファイルを編集するには、次の手順に従います。

ワークフロー エディターを開くには、ファイル ビューの右上隅にある 編集 アイコンを選択します。

[編集] ボタンのスクリーンショット

編集を行います。

ファイルを編集したら、[ 変更のコミット ] を選択し、[変更のコミット] フォームに入力します。 現在のブランチに直接コミットするか、新しいブランチを作成して pull request を開始するかを選択できます。

[変更のコミット] フォームのスクリーンショット。

一般的なコード スキャン構成オプションについては、この後のセクションを参照してください。

頻度を構成する
ワークフロー ファイルに対して一般的に行う編集は、コード スキャンの実行頻度の調整です。 CodeQL 分析ワークフローは、スケジュールに基づいて、またはリポジトリで特定のイベントが発生した場合にコードをスキャンするように構成できます。 また、ワークフロー ファイルを編集して、誰かが変更をプッシュしたときやプル要求が作成されるたびにコードをスキャンすることもできます。 この頻度を調整することで、開発者がコードに新たな脆弱性やエラーを取り込まないようにすることができます。 スケジュールに基づいてコードをスキャンすると、GitHub、セキュリティ研究者、コミュニティによって検出された最新の脆弱性とエラーが通知されます。 開発者がリポジトリを積極的に保守していない場合にもです。

プッシュ時にスキャンする
既定では、CodeQL 分析ワークフローで on:push イベントが使用されると、リポジトリの既定のブランチおよび保護されたブランチへのすべてのプッシュ時にコード スキャンがトリガーされます。 指定したブランチでコード スキャンがトリガーされるようにするには、ワークフローがそのブランチに存在している必要があります。 プッシュ時にスキャンすると、リポジトリの [セキュリティ ] タブに結果が表示されます。

さらに、オープン中の pull request にマップできる結果が on:push スキャンから返された場合、これらのアラートは他の pull request アラートと同じ場所にある pull request に自動的に表示されます。 これらのアラートは、ブランチのヘッドの既存の分析とターゲット ブランチの分析を比較することで特定します。

PR 時にスキャンする
既定の CodeQL 分析ワークフローでは、pull_request イベントを使用して、既定のブランチを対象とする pull request があったときにコード スキャンをトリガーします。 pull request がプライベート フォークからのものである場合、pull_request イベントがトリガーされるのは、リポジトリ設定で [Run workflows from fork pull requests] (フォークの pull requests からワークフローを実行する) オプションを選択した場合のみです。 pull request をスキャンすると、結果は、pull request チェックにアラートとして表示されます。

ヘッド コミットではなく pull request のマージ コミットをスキャンするように構成された pull_request トリガーを使用すると、プッシュごとにブランチのヘッドをスキャンするよりも効率的で正確な結果が生成されます。 ただし、pull request でトリガーするように構成できない CI/CD システムを使用する場合でも、on:push トリガーを使用して、コード スキャンで、結果をブランチのオープン pull request にマップし、アラートを注釈として pull request に追加できます。

pull request チェック エラーの原因となる重大度を定義する
既定では、重大度レベルが Error またはセキュリティの重大度レベルが Critical または High のアラートによってのみ、pull request チェック エラーが発生します。 プル要求エラーはコード スキャンを停止せず、コードをマージしようとしたときの阻害要因を表します。 プル要求エラーの一覧は、リポジトリの [セキュリティ] の下にある [コード スキャン アラート] タブにあります。 リポジトリの設定で、pull request チェック エラーの原因となるアラートの重大度とセキュリティの重大度のレベルを変更できます。

GitHub.com で、リポジトリのメイン ページに移動します。 リポジトリ名の下にある [設定] を選択します。

[設定] ボタンのスクリーンショット

左側のサイドバーで、[ コードのセキュリティと分析] を選択します。

[コードのセキュリティと分析] ボタンのスクリーンショット。

[保護ルール] の [コード スキャン] セクションで、ドロップダウン メニューを使用して、プル要求チェックエラーをトリガーする重大度レベルを選択します。

コード スキャンアラートの重大度ドロップダウン メニューのスクリーンショット。

pull request の不要なスキャンを回避する
変更されたファイルに関係なく、既定のブランチを対象とする特定の pull request でコード スキャンがトリガーされないようにしたい場合があります。 この設定を構成するには、コード スキャン ワークフローで on:pull_request:paths-ignore または on:pull_request:paths を指定します。 たとえば、pull request 内の変更がファイル拡張子 .md または .txt のファイルに対するものだけである場合、次の paths-ignore 配列を使用できます。


コピー
on:
   push:
      branches: [main, protected]
   pull_request:
      branches: [main]
      paths-ignore:
         - '**/*.md'
         - '**/*.txt'
スキャン スケジュールを調整する
既定の CodeQL 分析ワークフローを使用する場合、ワークフローは、イベントによってトリガーされるスキャンに加え、週に 1 回ランダムに生成された日時にリポジトリ内のコードをスキャンします。 このスケジュールを調整するには、ワークフローの cron 値を編集します。

次の例は、main という名前の既定のブランチと、protected という名前の保護された 1 つのブランチを持つリポジトリの CodeQL 分析ワークフローを示しています。


コピー
on:
   push:
      branches: [main, protected]
   pull_request:
      branches: [main]
   schedule:
      - cron: '20 14 * * 1'
このワークフローでは以下をスキャンします。

デフォルトのブランチと保護されたブランチへのすべてのプッシュ
デフォルトのブランチへのすべての pull request
毎週月曜日 14 時 20 分 (UTC) に既定のブランチ